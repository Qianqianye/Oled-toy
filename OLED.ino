void oled_showIP() {
  oled.clear(ALL); // Clear the display's internal memory
  oled.clear(PAGE); // Clear the buffer.
  oled.setFontType(0);
  oled.setCursor(0, 0);
  String str = "";
  for (int i = 0; i < 4; i++)
    str += i  ? "." + String(WiFi.localIP()[i]) : String(WiFi.localIP()[i]);
  str += ":";
  str += localPort;
  oled.print(str);
  oled.setCursor(0, 20);
  oled.print(String(DeviceName) + ".local");
  oled.display();
  delay(5000);
}

void routePixel(OSCMessage &msg, int addrOffset ) {
  Serial.println("pixel");
  drawPixel(msg.getInt(0), msg.getInt(1), msg.getInt(2) == 1);
}

void drawPixel(int x_, int y_, boolean color) {
  int x =  x_;
  int y = y_;
  bool BW = color;
  if (BW) {
    oled.pixel(x, y);
  }
  else {
    oled.pixel(x, y, BLACK, NORM);
  }
  oled.display();
  delay(10);
}

void routeFlip(OSCMessage &msg, int addrOffset ) {
  Serial.println("Clear");
  int xflip =   msg.getInt(0);
  int yflip = msg.getInt(1);
  flipScreen(xflip == 1, yflip == 1);
}

void flipScreen(bool H, bool V) {
  oled.flipVertical(H);
  oled.flipHorizontal(V);
  oled.display();
  delay(10);
}

void routeClear(OSCMessage &msg, int addrOffset ) {
  Serial.println("Clear");
  oled.clear(PAGE);     // Clear the screen
  oled.display();
  delay(10);
}

void routeLine(OSCMessage &msg, int addrOffset ) {
  drawLineAt(msg.getInt(0),   msg.getInt(1), msg.getInt(2), msg.getInt(3), msg.getInt(4) == 1  );
}

void drawLineAt(int x1_, int y1_, int x2_, int y2_, bool c_) {

  Serial.println("Line");
  int x1 =   x1_;
  int y1 = y1_;
  int x2 =   x2_;
  int y2 = y2_;
  bool BW = c_;
  if (BW) {
    oled.line(x1, y1, x2, y2);
  }
  else {
    oled.line(x1, y1, x2, y2, BLACK, NORM);
  }
  oled.display();
  delay(10);

}

void routeInvert(OSCMessage &msg, int addrOffset ) {
  Serial.println("Invert");
  int setTo =   msg.getInt(0);
  if (setTo == 0) {
    oled.invert(true);
  } else {
    oled.invert(false);
  }
  oled.display();
  delay(10);
}

void routeScroll(OSCMessage &msg, int addrOffset ) {
  Serial.println("Scroll");

  int startI =  msg.getInt(0);
  int stopI =  msg.getInt(1);

  oled.scrollRight(startI, stopI);
}

void routeScrollStop(OSCMessage &msg, int addrOffset ) {
  Serial.println("Scroll Stop");
  oled.scrollStop();
}

void routeRect(OSCMessage &msg, int addrOffset ) {
  drawRectAt(msg.getInt(0), msg.getInt(1),  msg.getInt(2), msg.getInt(3), msg.getInt(4) == 1,  msg.getInt(5) == 1   );
}

void drawRectAt(int XX_, int YY_, int WW_, int  HH_, bool c_, bool filled_) {
  Serial.println("Rect");
  int x =   XX_;
  int y = YY_;
  int w =  WW_;
  int h = HH_;
  bool BW = c_;
  bool filled = filled_;
  if (filled) {
    if (BW) {
      oled.rectFill(x, y, w, h);
    }
    else {
      oled.rectFill(x, y, w, h, BLACK, NORM);
    }
  } else {
    if (BW) {
      oled.rect(x, y, w, h);
    }
    else {
      oled.rect(x, y, w, h, BLACK, NORM);
    }
  }
  oled.display();
  delay(10);
}

void routeCircle(OSCMessage &msg, int addrOffset ) {
  Serial.println("Circle");
  int x =   msg.getInt(0);
  int y = msg.getInt(1);
  int radius =   msg.getInt(2);
  bool BW = msg.getInt(3) == 1;
  bool filled = msg.getInt(4) == 1;
  if (filled) {
    if (BW) {
      oled.circleFill(x, y, radius);
    }
    else {
      oled.circleFill(x, y, radius, BLACK, NORM);
    }
  } else {
    if (BW) {
      oled.circle(x, y, radius);
    }
    else {
      oled.circle(x, y, radius, BLACK, NORM);
    }
  }
  oled.display();
  delay(10);
}

void routeText(OSCMessage &msg, int addrOffset ) {
  Serial.println("Text");
  // font 0. 5x8
  // font 1. 8x16.
  // font 2. 10x16.
  // font 3. 12x48.
  // font 4. 31x48.

  int x =   msg.getInt(1);
  int y = msg.getInt(2);
  int font = msg.getInt(3);


  int lengthStr = msg.getDataLength(0);
  char strIn[lengthStr];
  msg.getString(0, strIn, lengthStr);


  Serial.println("---");
  Serial.println( oled.getTotalFonts() );
  Serial.println(strIn);
  Serial.println(font);
  oled.setFontType(font);

  // oled.setFontType(1);  // Use the biggest font
  delay(10);
  oled.setCursor(x, y);
  oled.print(strIn);
  oled.display();
  delay(10);

}

void routeCountdown(OSCMessage &msg, int addrOffset ) {
  Serial.println("countdown");
  doCountdown(msg.getInt(0));

}

void doCountdown(int secondsTo) {
  oled.setFontType(3);  // Use the biggest font
  int ms = 0;
  int s = secondsTo;
  while (s >= 0 )
  {
    oled.clear(PAGE);     // Clear the display
    oled.setCursor(0, 0); // Set cursor to top-left
    if (s < 10)
      oled.print("00");   // Print "00" if s is 1 digit
    else if (s < 100)
      oled.print("0");    // Print "0" if s is 2 digits
    oled.print(s);        // Print s's value
    oled.print(":");      // Print ":"
    oled.print(ms);       // Print ms value
    oled.display();       // Draw on the screen
    ms--;         // Increment ms
    if (ms < 0) // If ms is >= 10
    {
      ms = 10;     // Set ms back to 0
      s--;        // and increment s
      ESP.wdtFeed();
    }
  }

  oled.invert(true);
  SS4();
  delay(250);
  oled.invert(false);
  SS4();
  delay(250);
  oled.invert(true);
  SS4();
  delay(250);
  oled.invert(false);
  SS4();
  delay(250);
  oled.invert(true);
  SS4();
  delay(250);
  oled.invert(false);
  SS4();
  delay(250);
}

void printTitle(String title, int font) {
  int middleX = oled.getLCDWidth() / 2;
  int middleY = oled.getLCDHeight() / 2;
  oled.clear(PAGE);
  oled.setFontType(font);
  // Try to set the cursor in the middle of the screen
  oled.setCursor(middleX - (oled.getFontWidth() * (title.length() / 2)), middleY - (oled.getFontWidth() / 2));
  oled.print(title);  // Print the title:
  oled.display();
  delay(1500);
  oled.clear(PAGE);
}


void printText(String text, int font)
{
  oled.clear(PAGE);
  oled.setFontType(font);
  oled.setCursor(0, 0);
  // Print the title:
  oled.print(text);
  oled.display();
  delay(1500);
  oled.clear(PAGE);
}



void slowText(String text) {
  oled.clear(PAGE);     // Clear the screen
  oled.setFontType(0);  // Set font to type 0
  oled.setCursor(0, 0); // Set cursor to top-left

  for (int i = 0; i <= text.length(); i++)
  {
    // You can write byte values and they'll be mapped to
    // their ASCII equivalent character.
    oled.print(text[i]);  // Write a byte out as a character
    oled.display(); // Draw on the screen
    delay(10);      // Wait 10ms
    // We can only display 60 font 0 characters at a time.
    // Every 60 characters, pause for a moment. Then clear the page and start over.
    if ((i % 60 == 0) && (i != 0))
    {
      delay(500);           // Delay 500 ms
      oled.clear(PAGE);     // Clear the page
      oled.setCursor(0, 0); // Set cursor to top-left
    }
  }
}


uint8_t bender [] = {
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xBF, 0xDF, 0x5F, 0x5F, 0x5F, 0x5F,
  0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F,
  0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F,
  0x5F, 0xDF, 0xBF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xF9, 0xFE, 0x07, 0x01, 0x00, 0x00, 0xF8, 0xFE, 0xFF,
  0xFF, 0xFF, 0x1F, 0x1F, 0x1F, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00,
  0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0x1F, 0x1F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8,
  0x00, 0x00, 0x01, 0x07, 0xFE, 0xF9, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF9, 0xE7, 0xDC, 0xB0, 0xA0, 0x40, 0x41, 0x47, 0x4F,
  0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x4F, 0x47, 0x43, 0x40, 0x40, 0x40, 0x40,
  0x43, 0x47, 0x4F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x4F, 0x47, 0x43, 0x40,
  0x40, 0xA0, 0xB0, 0xDE, 0xE7, 0xF9, 0xFE, 0x1F, 0x0F, 0x07, 0x73, 0x79, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F,
  0xBF, 0x5F, 0xEF, 0x0F, 0xEF, 0xEF, 0xDF, 0xDF, 0x1F, 0xDF, 0xDF, 0xDF, 0xDF, 0x1F, 0xDF, 0xDF,
  0xDF, 0xDF, 0xDF, 0x1F, 0xDF, 0xDF, 0xDF, 0xEF, 0x0F, 0xEF, 0xDF, 0xBF, 0x7F, 0xFF, 0xFF, 0xFF,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xBE, 0x9C, 0xC0, 0xE0, 0xF0, 0xF9, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
  0xB7, 0x6F, 0xEE, 0x00, 0xDE, 0xDE, 0xDE, 0xDD, 0x00, 0xDD, 0xDD, 0xDD, 0xDD, 0x00, 0xDD, 0xDD,
  0xDD, 0xC5, 0xC1, 0x00, 0xC9, 0xC5, 0xC1, 0x01, 0xC8, 0xC4, 0x42, 0x80, 0xC0, 0xE8, 0xE4, 0xE2,
  0xE0, 0xE0, 0xEF, 0xEF, 0xE6, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFE, 0xFE, 0xFD, 0xFD, 0xFD, 0xFB, 0xF8, 0xFB, 0xFB, 0xFB, 0xFB, 0xF8, 0xFB, 0xFB,
  0xFB, 0xFB, 0xFB, 0xF8, 0xFB, 0xFD, 0xFD, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

uint8_t heart [] =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0,
  0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0,
  0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0x80,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xC0, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x3F, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0x7F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F,
  0x3F, 0x1F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F,
  0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07,
  0x0F, 0x0F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};

uint8_t balloon [] =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0xC0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFE,
  0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xF8,
  0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1F,
  0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0x3F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x1F, 0x3F,
  0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F,
  0x1F, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0x06, 0x03, 0x01, 0x1F,
  0x3E, 0x1E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x60, 0x38, 0x1F,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};

uint8_t cat [] {

  0xE0, 0xF0, 0x30, 0xF0, 0x00, 0xA0, 0xF0, 0x70, 0xF0, 0xF8,
  0xF0, 0xF0, 0xFA, 0x1B, 0xC1, 0xE3, 0x23, 0x03, 0x07, 0x0F,
  0x0F, 0x16, 0x3E, 0xF4, 0xE0, 0xC8, 0xF6, 0xFE, 0xFF, 0x3C,
  0x10, 0x0E, 0x80, 0x83, 0x40, 0xC0, 0xD0, 0xDC, 0xC6, 0x19,
  0x00, 0x00, 0x80, 0x20, 0x15, 0x02, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x60, 0x08, 0x10, 0x10, 0x00, 0x10, 0x12, 0x00, 0x80,
  0x40, 0x00, 0xA0, 0xA0, 0xFF, 0xDD, 0x81, 0x05, 0x80, 0xE2,
  0xE8, 0xC3, 0xC1, 0x03, 0x07, 0x0F, 0x3F, 0x78, 0xE3, 0xC1,
  0x80, 0x00, 0x00, 0x40, 0xC2, 0xE0, 0xF0, 0x70, 0x43, 0x0F,
  0xFF, 0xFF, 0xF8, 0xF8, 0xF8, 0xFC, 0x3F, 0xBF, 0xCF, 0x5E,
  0xA3, 0x81, 0x70, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x00, 0x00, 0x10, 0x00, 0x80, 0x80, 0xE0, 0x20, 0x00, 0x0C,
  0x08, 0x10, 0x00, 0x92, 0x08, 0x80, 0x86, 0x86, 0xF3, 0xE7,
  0x41, 0xF1, 0xF8, 0xF8, 0x9F, 0xF3, 0x6B, 0x27, 0x80, 0x41,
  0xC0, 0x02, 0x00, 0x80, 0xD7, 0x3F, 0xFE, 0x7C, 0x3C, 0x08,
  0x00, 0x00, 0x00, 0x78, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0x55,
  0x6E, 0x9D, 0x4F, 0x1D, 0x2C, 0xB2, 0xB0, 0xD0, 0xC3, 0x19,
  0x99, 0x81, 0xD0, 0xE9, 0xF4, 0xDC, 0xFE, 0x86, 0x06, 0xC0,
  0x80, 0xC0, 0xE0, 0xEC, 0xBC, 0xA4, 0x34, 0x18, 0x04, 0x00,
  0x14, 0x04, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xAD,
  0x2F, 0x9D, 0x9F, 0x5F, 0xE6, 0x7E, 0xFA, 0xF3, 0xFD, 0xFD,
  0xA1, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x13, 0x39,
  0x3F, 0x07, 0x03, 0x00, 0x01, 0x19, 0x33, 0x1A, 0xF7, 0xFA,
  0xFA, 0xFC, 0x7F, 0x3F, 0x3F, 0x1F, 0x0F, 0xC7, 0xC7, 0xE7,
  0x07, 0x07, 0x07, 0x27, 0x07, 0x07, 0x07, 0x07, 0x8E, 0x0C,
  0x16, 0x38, 0x7C, 0xE4, 0xF0, 0xE1, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFB, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0xC0, 0x00, 0x00, 0x00, 0x80,
  0xC0, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x40, 0xC0, 0xC8, 0xF0, 0x7C, 0xFC,
  0x78, 0xF9, 0x77, 0xE4, 0xE8, 0xC8, 0xD8, 0xD0, 0x90, 0x9C,
  0x9C, 0x9F, 0xCF, 0xC7, 0xC3, 0xE0, 0xF8, 0xD1, 0x02, 0x06,
  0x81, 0x83, 0x83, 0xA7, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x9F,
  0xC0, 0xE1, 0xE5, 0xF3, 0xF9, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC,
  0xFC, 0xFC, 0xFF, 0xFF, 0x7E, 0xDF, 0x5F, 0xFF, 0x7B, 0x7D,
  0xEF, 0xD5, 0xF4, 0xFF, 0xCE, 0xE1, 0x20, 0x02, 0x03, 0xE2,
  0x8F, 0x9D, 0x31, 0x01, 0x03, 0x93, 0x33, 0x03, 0x0B, 0x07,
  0x03, 0x23, 0x20, 0x00
};

uint8_t moon [] {
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F,
  0x3F, 0x9F, 0x8F, 0xCF, 0xCF, 0xE7, 0xE7, 0xE7, 0xF3, 0xF3,
  0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xE7, 0xE7, 0xE7,
  0xCF, 0xCF, 0x8F, 0x9F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x0F, 0xC7,
  0xF1, 0xF8, 0xFC, 0x3E, 0x1F, 0x1B, 0x1B, 0x3F, 0xFF, 0xFF,
  0xFF, 0xCF, 0x0F, 0x07, 0x07, 0x07, 0x8F, 0xFF, 0x3F, 0x3F,
  0x1F, 0x1F, 0x1F, 0x1D, 0xF8, 0xF8, 0x39, 0x1F, 0x1B, 0x3E,
  0xFC, 0xF8, 0xF1, 0xC7, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07,
  0x00, 0xF8, 0x1F, 0x07, 0x1F, 0x03, 0x43, 0xC3, 0xC0, 0x80,
  0x80, 0x18, 0x1F, 0x1F, 0x3F, 0x7F, 0xF7, 0xF3, 0xF3, 0xFF,
  0xFF, 0xFE, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF,
  0x9E, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8,
  0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xF0, 0x80, 0x0F, 0x7F, 0xCF, 0x00, 0x00,
  0x00, 0x01, 0x33, 0x23, 0x07, 0x06, 0x00, 0x20, 0x10, 0x18,
  0xFF, 0x3F, 0x3F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0x7F, 0x0F, 0x80, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC,
  0xF8, 0xF1, 0xC7, 0x8F, 0x1C, 0x3C, 0x70, 0xF8, 0xFC, 0xFC,
  0xFC, 0xEE, 0xC7, 0xC7, 0xFF, 0xFC, 0xFC, 0xF8, 0xFC, 0xFC,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x7F, 0x3F, 0x1F, 0x8F, 0xC7, 0xF1, 0xF8, 0xFC, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFE, 0xFC, 0xF8, 0xF9, 0xF9, 0xF3, 0xF3, 0xF3, 0xE6, 0xE6,
  0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xF3, 0xF3, 0xF3,
  0xF9, 0xF9, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF
};

void routePictureCall(int index) {
  switch (index) {
    case 1:
      drawBalloon();
      break;
    case 2:
      drawBender();
      break;
    case 3:
      drawHeart();
      break;
    case 4:
      drawCat();
      break;
  }
}

void routeBalloon(OSCMessage & msg, int addrOffset ) {
  drawBalloon();
}

void drawBalloon() {
  oled.clear(PAGE);//clear the screen before we draw our image
  oled.drawBitmap(balloon);//call the drawBitmap function and pass it the array from above
  oled.display();//display the imgae
}

void routeBender(OSCMessage & msg, int addrOffset ) {
  drawBender();
}

void drawBender() {
  oled.clear(PAGE);//clear the screen before we draw our image
  oled.drawBitmap(bender);//call the drawBitmap function and pass it the array from above
  oled.display();//display the imgae
}

void routeHeart(OSCMessage & msg, int addrOffset ) {
  drawHeart();
}

void drawHeart() {
  oled.clear(PAGE);//clear the screen before we draw our image
  oled.drawBitmap(heart);//call the drawBitmap function and pass it the array from above
  oled.display();//display the imgae
}


void routeCat(OSCMessage & msg, int addrOffset ) {
  drawCat();
}

void drawCat() {
  oled.clear(PAGE);//clear the screen before we draw our image
  oled.drawBitmap(cat);//call the drawBitmap function and pass it the array from above
  oled.display();//display the imgae
}


void drawMoon() {
  oled.clear(PAGE);//clear the screen before we draw our image
  oled.drawBitmap(moon);//call the drawBitmap function and pass it the array from above
  oled.display();//display the imgae
}

